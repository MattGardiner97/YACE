<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YACE</name>
    </assembly>
    <members>
        <member name="T:YACE.CPU">
            <summary>
            Executes the CPU instructions from the ROM in memory.
            </summary>
        </member>
        <member name="P:YACE.CPU.PC">
            <summary>
            Program Counter. Memory location of the next instruction to be executed.
            </summary>
        </member>
        <member name="P:YACE.CPU.Registers">
            <summary>
            Registers 0x0 - 0xF (0-15).
            </summary>
        </member>
        <member name="P:YACE.CPU.RegisterI">
            <summary>
            Address Register. Used by instructions that require a 2 byte address to be supplied.
            </summary>
        </member>
        <member name="P:YACE.CPU.DelayTimer">
            <summary>
            The delay timer counts down at a rate of 60Hz and can be used for timing.
            </summary>
        </member>
        <member name="P:YACE.CPU.SoundTimer">
            <summary>
            The sound timer counts down at a rate of 60Hz and emits a noise when the value is non-zero.
            </summary>
        </member>
        <member name="P:YACE.CPU.WaitingForInput">
            <summary>
            Indicates that the program is currently blocked and waiting for user input.
            </summary>
        </member>
        <member name="F:YACE.CPU._waitingForInputTargetRegister">
            <summary>
            The register to store the pressed key value in.
            </summary>
        </member>
        <member name="E:YACE.CPU.UnblockedByKeypress">
             <summary>
            Occurs when a key is pressed while the CPU is blocked and awaiting a key press (Opcode 0xFX0A)
             </summary>
        </member>
        <member name="E:YACE.CPU.Beeped">
            <summary>
            Raised when the value of SoundTimer is non-zero.
            </summary>
        </member>
        <member name="M:YACE.CPU.Reset">
            <summary>
            Resets the value of all registers.
            </summary>
        </member>
        <member name="M:YACE.CPU.Tick">
            <summary>
            Executes the next instruction in memory and updates any timers as needed.
            </summary>
        </member>
        <member name="M:YACE.CPU.Fetch">
            <summary>
            Retrieves the next opcode from memory.
            </summary>
            <returns>The opcode to be executed next.</returns>
        </member>
        <member name="M:YACE.CPU.Decode(System.UInt16)">
            <summary>
            Determines which function to call next based on the current opcode.
            </summary>
            <param name="Opcode">The opcode to be decoded.</param>
            <returns>A delegate pointing to the next function which should be called.</returns>
        </member>
        <member name="M:YACE.CPU.Execute(System.Func{System.UInt16})">
            <summary>
            Executes the next instruction and increments the program counter.
            </summary>
            <param name="Func">The function to call.</param>
        </member>
        <member name="M:YACE.CPU.KeyPressEventHandler(System.Byte)">
            <summary>
            Handles a key being pressed while the program is blocked.
            </summary>
            <param name="Keycode">The keycode of the pressed key (0x0 - 0xF).</param>
        </member>
        <member name="T:YACE.Debugger">
            <summary>
            Class for accessing emulator debug information
            </summary>
        </member>
        <member name="E:YACE.Debugger.RegisterValueChanged">
            <summary>
            Occurs when a register's value is changed via the debugger.
            </summary>
        </member>
        <member name="E:YACE.Debugger.Stepped">
            <summary>
            Occurs when the emulator is stepped using the debugger.
            </summary>
        </member>
        <member name="M:YACE.Debugger.GetProgramCounter">
            <summary>
            Get the current Program Counter register value
            </summary>
            <returns></returns>
        </member>
        <member name="M:YACE.Debugger.SetProgramCounter(System.UInt16)">
            <summary>
            Set the current Program Counter register value.
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:YACE.Debugger.GetMainRegister(System.Int32)">
            <summary>.
            Get the value of the specified register
            </summary>
            <param name="RegisterIndex">The index of the register (0x0 - 0xF).</param>
            <returns>The register value</returns>
        </member>
        <member name="M:YACE.Debugger.SetMainRegister(System.Int32,System.Byte)">
            <summary>
            Sets the value of the specified register
            </summary>
            <param name="RegisterIndex">The index of the register (0x0 - 0xF).</param>
            <param name="Value">The new value</param>
        </member>
        <member name="M:YACE.Debugger.GetRegisterI">
            <summary>
            Get the value of register I (address register).
            </summary>
            <returns></returns>
        </member>
        <member name="M:YACE.Debugger.SetRegisterI(System.UInt16)">
            <summary>
            Set the value of register I (address register).
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:YACE.Debugger.Step">
            <summary>
            Execute a single instruction on the CPU and then raise the stepped event.
            </summary>
        </member>
        <member name="M:YACE.Debugger.GetRAM">
            <summary>
            Gets a reference to the current main memory (RAM) of the emulator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YACE.Debugger.GetROM">
            <summary>
            Gets a reference to the currently loaded ROM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YACE.Debugger.GetROMBaseAddress">
            <summary>
            Gets the start address of memory where ROMs are loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:YACE.Emulator">
            <summary>
            Main class responsible for emulation
            </summary>
        </member>
        <member name="P:YACE.Emulator.Memory">
            <summary>
            Represents the device's volatile memory (RAM)
            </summary>
        </member>
        <member name="P:YACE.Emulator.Graphics">
            <summary>
            Handles drawing operations for the device
            </summary>
        </member>
        <member name="P:YACE.Emulator.Input">
            <summary>
            Handles user input for the device
            </summary>
        </member>
        <member name="P:YACE.Emulator.CPU">
            <summary>
            Performs the core of the emulation work
            </summary>
        </member>
        <member name="P:YACE.Emulator.Debugger">
            <summary>
            Bridge between library consumers and emulator internals
            </summary>
        </member>
        <member name="P:YACE.Emulator.IsPaused">
            <summary>
            Represents whether the device is currently paused
            </summary>
        </member>
        <member name="P:YACE.Emulator.ROMIsLoaded">
            <summary>
            Represents whether a ROM is currently loaded
            </summary>
        </member>
        <member name="E:YACE.Emulator.Paused">
            <summary>
            Raised when the emulator is paused.
            </summary>
        </member>
        <member name="E:YACE.Emulator.Resumed">
            <summary>
            Raised when the emulator is resumed.
            </summary>
        </member>
        <member name="E:YACE.Emulator.LateResumed">
            <summary>
            Raised after the <see cref="E:YACE.Emulator.Resumed"/> event is raised.
            </summary>
        </member>
        <member name="E:YACE.Emulator.Beeped">
            <summary>
            Raised when the emulator needs to play a sound effect. Playing the sound is performed by the frontend subscribed to this event.
            </summary>
        </member>
        <member name="E:YACE.Emulator.ROMLoaded">
            <summary>
            Raised when a ROM is loaded into memory.
            </summary>
        </member>
        <member name="M:YACE.Emulator.Tick">
            <summary>
            Executes a single instruction on the CPU
            </summary>
        </member>
        <member name="M:YACE.Emulator.Pause">
            <summary>
            Pauses emulation.
            </summary>
        </member>
        <member name="M:YACE.Emulator.Resume">
            <summary>
            Resumes emulation.
            </summary>
        </member>
        <member name="M:YACE.Emulator.LoadROM(System.Byte[])">
            <summary>
            Resets the state of the machine and loads a new ROM into main memory.
            </summary>
            <param name="ROM"></param>
        </member>
        <member name="M:YACE.Emulator.Reset">
            <summary>
            Resets the state of the machine.
            </summary>
        </member>
        <member name="P:YACE.Graphics.FrameBuffer">
            <summary>
            The current emulator framebuffer. Each element refers to a single pixel on the screen. Values can be 1 or 0.
            </summary>
        </member>
        <member name="E:YACE.Graphics.ScreenRefresh">
            <summary>
            Raised when the frame buffer is drawn to.
            </summary>
        </member>
        <member name="M:YACE.Graphics.Reset">
            <summary>
            Resets the state of the object.
            </summary>
        </member>
        <member name="M:YACE.Graphics.ClearDisplay">
            <summary>
            Resets all pixels to 0.
            </summary>
        </member>
        <member name="M:YACE.Graphics.DrawSprite(System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Draws a sprite to the frame buffer. 
            </summary>
            <param name="StartX">The X position to draw the sprite</param>
            <param name="StartY">The Y position to draw the sprite</param>
            <param name="Height">How many rows of bytes to draw.</param>
            <param name="IAddress">The memory location to load sprite data from.</param>
            <remarks>Sprites are represented by bytes starting at IAddress. All sprites are 8 pixels wide.
            Each byte represents a row of pixels, each bit represents a single pixel. The height parameter represents how many bytes will be read.
            A bit value of 1 instructs to flip the target pixel state. A bit value of 0 does nothing to the target pixel.</remarks>
            <returns>Indicates whether a bit was set from 0 to 1. Often used for collision detection.</returns>
        </member>
    </members>
</doc>
